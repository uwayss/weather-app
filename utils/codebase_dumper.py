import os
import datetime
import platform
import subprocess
from pathlib import Path

def generate_codebase_dump():
    # Configuration
    exclude_dirs = {'node_modules', '.expo', '.git', '__pycache__', 'android'}
    
    # Output directory
    output_dir = Path('codebase')
    output_dir.mkdir(exist_ok=True)
    
    # Latest snapshot filename
    latest_snapshot_file = output_dir / "LatestSnapshot.txt"
    
    # Rename existing LatestSnapshot.txt if it exists
    if latest_snapshot_file.exists():
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        old_snapshot_file = output_dir / f"LatestSnapshot_{timestamp}.txt"
        latest_snapshot_file.rename(old_snapshot_file)
    
    # Get tracked files from Git
    try:
        result = subprocess.run(['git', 'ls-files'], capture_output=True, text=True, check=True)
        tracked_files = result.stdout.splitlines()
    except subprocess.CalledProcessError as e:
        print(f"Error getting Git tracked files: {e}")
        return
    
    # Get proper case-sensitive path handling
    is_windows = platform.system() == 'Windows'
    project_root = Path(os.getcwd())

    with open(latest_snapshot_file, 'w', encoding='utf-8') as f_out:
        f_out.write(f'// AUTOGENERATED CODEBASE DUMP\n')
        f_out.write(f'// Project Root: {project_root}\n\n')

        for tracked_file in tracked_files:
            file_path = project_root / tracked_file

            # Skip excluded directories
            if any(part in exclude_dirs for part in file_path.parts):
                continue
            
            # Handle case-insensitive file systems
            if is_windows:
                if any(part.lower() in exclude_dirs for part in file_path.parts):
                    continue
            else:
                if any(part in exclude_dirs for part in file_path.parts):
                    continue

            try:
                # Try reading the file with utf-8 encoding
                with open(file_path, 'r', encoding='utf-8') as f_in:
                    content = f_in.read()
                
                # Write file path and content
                f_out.write(f'\n// FILE: {tracked_file}\n')
                f_out.write(content + '\n')
            
            except UnicodeDecodeError:
                # If utf-8 fails, skip and write a message
                f_out.write(f'\n// FILE: {tracked_file} (Skipped due to unreadable content)\n')
            
            except Exception as e:
                f_out.write(f'\n// ERROR READING {tracked_file}: {str(e)}\n')

    print(f"Codebase dump created: {latest_snapshot_file.resolve()}")

if __name__ == "__main__":
    generate_codebase_dump()