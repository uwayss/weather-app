import os
import datetime
import platform
from pathlib import Path

def generate_codebase_dump():
    # Configuration
    exclude_dirs = {'node_modules', '.expo', 'ios', 'android', '.git', '__pycache__'}
    allowed_extensions = {'.js', '.ts', '.tsx', '.json', '.md', '.java', '.kt', '.gradle', '.xml', ".jsx"}
    max_file_size = 200000  # 200KB
    
    # Create output directory
    output_dir = Path('codebase')
    output_dir.mkdir(exist_ok=True)
    
    # Generate timestamped filename
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = output_dir / f"codebase_{timestamp}.txt"
    
    # Get proper case-sensitive path handling
    is_windows = platform.system() == 'Windows'
    project_root = Path(os.getcwd())

    with open(output_file, 'w', encoding='utf-8') as f_out:
        f_out.write(f'// AUTOGENERATED CODEBASE DUMP - {timestamp}\n')
        f_out.write(f'// Project Root: {project_root}\n\n')

        for root, dirs, files in os.walk(project_root, topdown=True):
            # Convert directory names to lowercase for comparison on Windows
            if is_windows:
                dirs[:] = [d for d in dirs if d.lower() not in exclude_dirs]
            else:
                dirs[:] = [d for d in dirs if d not in exclude_dirs]

            current_path = Path(root).relative_to(project_root)
            if current_path != Path('.'):
                f_out.write(f'\n// DIRECTORY: {current_path}\n')

            for file in files:
                file_path = Path(root) / file
                try:
                    if (file_path.suffix.lower() in allowed_extensions and
                        file_path.stat().st_size <= max_file_size and
                        not any(part.startswith('.') for part in file_path.parts)):
                        
                        rel_path = file_path.relative_to(project_root)
                        with open(file_path, 'r', encoding='utf-8') as f_in:
                            content = f_in.read()
                            
                        f_out.write(f'\n// FILE: {rel_path}\n')
                        f_out.write(content + '\n')
                except Exception as e:
                    f_out.write(f'\n// ERROR READING {file_path}: {str(e)}\n')

    print(f"Codebase dump created: {output_file.resolve()}")

if __name__ == "__main__":
    generate_codebase_dump()